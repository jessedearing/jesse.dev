<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on </title>
    <link>http://jessed.io/tags/golang/index.xml</link>
    <description>Recent content in Golang on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://jessed.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Go is for .Close()’ers</title>
      <link>http://jessed.io/post/20161004-Go-is-for-Closers/</link>
      <pubDate>Tue, 04 Oct 2016 10:35:32 -0800</pubDate>
      
      <guid>http://jessed.io/post/20161004-Go-is-for-Closers/</guid>
      <description>

&lt;p&gt;In Go the typical way to open a file or connection is this commonly seen block
of code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;connection, err := net.Dial(&amp;quot;tcp&amp;quot;, &amp;quot;example.com:80&amp;quot;)
if err != nil {
    // Do something to handle the error
    return
}
defer connection.Close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That &lt;code&gt;defer connection.Close()&lt;/code&gt; on line 6 plays a vital role in writing Go code
that won’t run your host machine out of memory, kernel file descriptors, or any
other transactional resource (one in which operations open, do something, then
close). All that does is put the function call on a stack that is called in LIFO
(&lt;em&gt;Ed. originally wrote FIFO&lt;/em&gt;) order after the code goes out of scope. This post
aims to focus on the &lt;code&gt;Close()&lt;/code&gt; method though.&lt;/p&gt;

&lt;h2 id=&#34;the-interfaces-are-weak&#34;&gt;The interfaces are weak?!&lt;/h2&gt;

&lt;p&gt;Go has interfaces explicit interfaces that define a close method. The IO package
has a lot of them (all composing the Closer interface): ReadCloser, WriteCloser,
and ReadWriteCloser. Each of these indicate a struct that needs to be closed
when you’ve written or read everything or decided you’ve written or read enough.&lt;/p&gt;

&lt;p&gt;Not everything that needs to be closed is so obviously named though. The
“database/sql” package just has a DB struct that has a Close method. Also in the
same package the Stmt type and Rows type has a Close method.&lt;/p&gt;

&lt;p&gt;In other cases, the Close method is even further obscured by not being a part of
a defined type in the package. This is used in the “http” package all over the
place. The Body attribute in the Response struct is an io.ReadCloser.&lt;/p&gt;

&lt;h2 id=&#34;abc-always-be-closing&#34;&gt;ABC — Always Be Closing&lt;/h2&gt;

&lt;p&gt;In Go, closing is important and defers we’re built to group closes with their
definition. In other languages there is usually a syntax for closing a
connection at the end of a block. In Java, it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;try(FileInputStream input = new FileInputStream(“file.txt”)) {
  int data = input.read();
  while(data != -1) {
    System.out.print((char) data);
    data = input.read();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s the example in Ruby:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;File.open(‘hello.txt’, ‘r’) do |f|
 while line = f.gets
   puts line
 end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Go we get defers. They’re fine I guess, but it does mean that we don’t get
the luxury of knowing how to Close a resource without reading the documentation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you do not read the documentation for the resource you are about to use it
could mean disaster&lt;/strong&gt;. For example, this gem from the &amp;ldquo;net/http&amp;rdquo; package docs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The default HTTP client’s Transport does not attempt to reuse HTTP/1.0 or
HTTP/1.1 TCP connections (“keep-alive”) unless the Body is read to completion
and is closed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also in the aforementioned &amp;ldquo;database/sql&amp;rdquo; package if you forget to close Stmt in
MySQL this causes your Go program to allocate 16,382 prepared statements for the
connection you are using and then your Go program will be unable to allocate
prepared statements until your connection restarts.&lt;/p&gt;

&lt;p&gt;At a basic level, eventually you will exhaust the number of file descriptors you
are allowed by the kernel. Files can be on disk files but also TCP sockets in a
Linux system.&lt;/p&gt;

&lt;h2 id=&#34;only-one-thing-matters&#34;&gt;Only one thing matters&lt;/h2&gt;

&lt;p&gt;Read the docs look for a Close method, look for a struct name that ends in
Closer. When you review code, make sure that resources have a defer with a Close
method. Dealing with resources is something we do as engineers who write code
that run in production so we have to remember that they are managed, finite, and
must be released to the system when the program is done with them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Who’s Running that on my System: Case of the stolen CPU</title>
      <link>http://jessed.io/post/20160916-Whos-running-that-on-my-system/</link>
      <pubDate>Fri, 16 Sep 2016 01:11:56 -0700</pubDate>
      
      <guid>http://jessed.io/post/20160916-Whos-running-that-on-my-system/</guid>
      <description>

&lt;p&gt;Last week, I found myself needing to find what application a query was originating from.
My typical method for doing this is searching through source code before I
eventually get angry that I can’t find the query originating from an ORM and
start drafting an email decreeing that all applications get distinct logins to
the database that I’ll never send because who is going to listen anyway.&lt;/p&gt;

&lt;p&gt;I had an idea for how I can track a query all the way back to the process that
accessed it and I even scripted it.&lt;/p&gt;

&lt;h2 id=&#34;connections&#34;&gt;Connections&lt;/h2&gt;

&lt;p&gt;In MySQL every connection is mapped to a thread and each thread has an ID. When
you run SHOW PROCESSLIST in MySQL you can see all the running processes. The
information for this comes from the processlist table in the information_schema
database. This table also lists the host and the ephemeral port of the
connection. The ephemeral port exists on the client (initiating) side of a TCP
connection. So if you see a query running by using a tool like mytop and you’re
able to capture the thread ID you can be pretty sure that the connection is
still open because TCP connections are expensive and most libraries try to pool
them and reuse them.&lt;/p&gt;

&lt;p&gt;Here is the section of the Go program I wrote to capture the host and the port.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;db, err := sql.Open(&amp;quot;mysql&amp;quot;, user+&amp;quot;:&amp;quot;+password+&amp;quot;@tcp(&amp;quot;+host+&amp;quot;:3306)/information_schema&amp;quot;)
if err != nil {
  log.Fatal(err)
}
defer db.Close()

hostWithPort := getHost(db)
if hostWithPort == nil {
  log.Println(&amp;quot;Could not find query with that ID&amp;quot;)
  return
}
hostAndPort := strings.Split(hostWithPort, &amp;quot;:&amp;quot;)
host, port := hostAndPort[0], hostAndPort[1]

log.Printf(&amp;quot;Host: %s  Port: %s\n&amp;quot;, host, port)

func getHost(db *sql.DB) string {
	result, err := db.Query(&amp;quot;select HOST from processlist where ID = ?&amp;quot;, *pid)
	if err != nil {
		log.Panic(err)
	}

	defer result.Close()

	var host string
	for result.Next() {
		result.Scan(&amp;amp;host)
	}

	return host
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hunting-down-the-connection&#34;&gt;Hunting down the connection&lt;/h2&gt;

&lt;p&gt;Once you have the host and port you can then ssh into the host that you were
given to find what process is connected to the port. This can be discovered
using a program like lsof. There are many ways to find the port a process is
using but I am most familiar with lsof.&lt;/p&gt;

&lt;p&gt;The Go code to SSH into a server uses the golang.org/x/crypto/ssh library and
I’ve incorporated some of my knowledge of bash.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sshClient, err := setUpSSHClient(host)
if err != nil {
  log.Panic(err)
}
defer sshClient.Close()

lsofOut, err := runCmd(sshClient, &amp;quot;sudo lsof -i tcp:&amp;quot;+port+&amp;quot; | tail -1 | awk &#39;{ print $2; }&#39;&amp;quot;)
lsofOut = strings.Trim(lsofOut, &amp;quot;\n\r &amp;quot;)
if err != nil {
  log.Panic(err)
}

psOut, err := runCmd(sshClient, &amp;quot;ps -p &amp;quot;+lsofOut+&amp;quot; -o pid -o etime -o command&amp;quot;)
if err != nil {
  log.Panic(err)
}

log.Printf(&amp;quot;PID: %s\n&amp;quot;, lsofOut)
log.Printf(&amp;quot;Process that owns connection:\n%s\n&amp;quot;, psOut)

func setUpSSHClient(host string) (*ssh.Client, error) {
	privkey, err := ioutil.ReadFile(os.Getenv(&amp;quot;HOME&amp;quot;) + &amp;quot;/.ssh/id_rsa&amp;quot;)
	if err != nil {
		return nil, err
	}
	signer, err := ssh.ParsePrivateKey(privkey)
	if err != nil {
		return nil, err
	}
	sshConfig := &amp;amp;ssh.ClientConfig{
		User: *sshuser,
		Auth: []ssh.AuthMethod{
			ssh.PublicKeys(signer),
		},
	}

	client, err := ssh.Dial(&amp;quot;tcp&amp;quot;, host+&amp;quot;:22&amp;quot;, sshConfig)
	if err != nil {
		return nil, err
	}

	return client, nil
}

func runCmd(client *ssh.Client, command string) (string, error) {
	sess, err := client.NewSession()
	if err != nil {
		return &amp;quot;&amp;quot;, err
	}
	defer sess.Close()

	b, err := sess.CombinedOutput(command)
	if err != nil {
		return &amp;quot;&amp;quot;, err
	}

	return string(b), nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This helped me find the process that was running the problematic query. I was
able to find what codebase was causing the issue and thus the team that owns
that codebase. It turns out they were in the middle of a deploy to fix the
problem because they noticed it right before I did.&lt;/p&gt;

&lt;p&gt;Once you have found the process you can you can also other informative things
like run strace, jstack, or gdb to diagnose issues (I wouldn’t recommend doing
this in production).&lt;/p&gt;

&lt;p&gt;Happy query hunting!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>