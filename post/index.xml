<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>http://jessed.io/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Sep 2016 01:11:56 -0700</lastBuildDate>
    <atom:link href="http://jessed.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Who&#39;s Running That on my System</title>
      <link>http://jessed.io/post/Whos-running-that-on-my-system/</link>
      <pubDate>Fri, 16 Sep 2016 01:11:56 -0700</pubDate>
      
      <guid>http://jessed.io/post/Whos-running-that-on-my-system/</guid>
      <description>

&lt;p&gt;Last week, I found myself needing to find what application a query was originating from.
My typical method for doing this is searching through source code before I
eventually get angry that I can&amp;rsquo;t find the query originating from an ORM and
start drafting an email decreeing that all applications get distinct logins to
the database that I&amp;rsquo;ll never send because who is going to listen anyway.&lt;/p&gt;

&lt;p&gt;I had an idea for how I can track a query all the way back to the process that
accessed it and I even scripted it.&lt;/p&gt;

&lt;h3 id=&#34;connections&#34;&gt;Connections&lt;/h3&gt;

&lt;p&gt;In MySQL every connection is mapped to a thread and each thread has an ID. When
you run &lt;code&gt;SHOW PROCESSLIST&lt;/code&gt; in MySQL you can see &lt;strong&gt;all&lt;/strong&gt; the running processes.
The information for this comes from the &lt;code&gt;processlist&lt;/code&gt; table in the
&lt;code&gt;information_schema&lt;/code&gt; database. This table also lists the host and the
&lt;em&gt;ephemeral&lt;/em&gt; port of the connection. The ephemeral port exists on the client
(initiating) side of a TCP connection. So if you see a query running by using a
tool like &lt;code&gt;mytop&lt;/code&gt; and you&amp;rsquo;re able to capture the thread ID you can be pretty
sure that the connection is still open because TCP connections are expensive and
most libraries try to pool them and reuse them.&lt;/p&gt;

&lt;p&gt;Here is the section of the Go program I wrote to capture the host and the port.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;db, err := sql.Open(&amp;quot;mysql&amp;quot;, user+&amp;quot;:&amp;quot;+password+&amp;quot;@tcp(&amp;quot;+host+&amp;quot;:3306)/information_schema&amp;quot;)
if err != nil {
  log.Fatal(err)
}
defer db.Close()

hostWithPort := getHost(db)
if hostWithPort == nil {
  log.Println(&amp;quot;Could not find query with that ID&amp;quot;)
  return
}
hostAndPort := strings.Split(hostWithPort, &amp;quot;:&amp;quot;)
host, port := hostAndPort[0], hostAndPort[1]

log.Printf(&amp;quot;Host: %s  Port: %s\n&amp;quot;, host, port)

func getHost(db *sql.DB) string {
	result, err := db.Query(&amp;quot;select HOST from processlist where ID = ?&amp;quot;, *pid)
	if err != nil {
		log.Panic(err)
	}

	defer result.Close()

	var host string
	for result.Next() {
		result.Scan(&amp;amp;host)
	}

	return host
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hunting-down-the-connection&#34;&gt;Hunting down the connection&lt;/h3&gt;

&lt;p&gt;Once you have the host and port you can then ssh into the host that you were
given to find what process is connected to the port. This can be discovered
using a program like lsof. There are many ways to find the port a process is
using but I am most familiar with lsof.&lt;/p&gt;

&lt;p&gt;The Go code to SSH into a server uses the golang.org/x/crypto/ssh library and
I&amp;rsquo;ve incorporated some of my knowledge of bash.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sshClient, err := setUpSSHClient(host)
if err != nil {
  log.Panic(err)
}
defer sshClient.Close()

lsofOut, err := runCmd(sshClient, &amp;quot;sudo lsof -i tcp:&amp;quot;+port+&amp;quot; | tail -1 | awk &#39;{ print $2; }&#39;&amp;quot;)
lsofOut = strings.Trim(lsofOut, &amp;quot;\n\r &amp;quot;)
if err != nil {
  log.Panic(err)
}

psOut, err := runCmd(sshClient, &amp;quot;ps -p &amp;quot;+lsofOut+&amp;quot; -o pid -o etime -o command&amp;quot;)
if err != nil {
  log.Panic(err)
}

log.Printf(&amp;quot;PID: %s\n&amp;quot;, lsofOut)
log.Printf(&amp;quot;Process that owns connection:\n%s\n&amp;quot;, psOut)

func setUpSSHClient(host string) (*ssh.Client, error) {
	privkey, err := ioutil.ReadFile(os.Getenv(&amp;quot;HOME&amp;quot;) + &amp;quot;/.ssh/id_rsa&amp;quot;)
	if err != nil {
		return nil, err
	}
	signer, err := ssh.ParsePrivateKey(privkey)
	if err != nil {
		return nil, err
	}
	sshConfig := &amp;amp;ssh.ClientConfig{
		User: *sshuser,
		Auth: []ssh.AuthMethod{
			ssh.PublicKeys(signer),
		},
	}

	client, err := ssh.Dial(&amp;quot;tcp&amp;quot;, host+&amp;quot;:22&amp;quot;, sshConfig)
	if err != nil {
		return nil, err
	}

	return client, nil
}

func runCmd(client *ssh.Client, command string) (string, error) {
	sess, err := client.NewSession()
	if err != nil {
		return &amp;quot;&amp;quot;, err
	}
	defer sess.Close()

	b, err := sess.CombinedOutput(command)
	if err != nil {
		return &amp;quot;&amp;quot;, err
	}

	return string(b), nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Once you have found the process you can then figure out what codebase a query
originated from, you can do evil (and potentially informative) things like run
strace, jstack, or gdb to diagnose issues (I wouldn&amp;rsquo;t recommend doing this in
production). Happy query hunting!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>