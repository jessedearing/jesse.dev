<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>http://jessed.io/post/index.xml</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Nov 2016 22:07:24 -0800</lastBuildDate>
    <atom:link href="http://jessed.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>5 CLI Tools all software engineers should know about</title>
      <link>http://jessed.io/post/20161114_5_cli_tools_all_software_engineers_should_know_about/</link>
      <pubDate>Mon, 14 Nov 2016 22:07:24 -0800</pubDate>
      
      <guid>http://jessed.io/post/20161114_5_cli_tools_all_software_engineers_should_know_about/</guid>
      <description>

&lt;p&gt;The following CLI tools, I have found to be extremely useful when dealing with
systems to quickly find the information I need. Please note that all these
commands are being run from OS X and are the BSD commands not the GNU commands
that typically ship with a standard Linux distro.&lt;/p&gt;

&lt;h2 id=&#34;5-xargs&#34;&gt;5. xargs&lt;/h2&gt;

&lt;p&gt;xargs simply takes strings separated by whitespace and passes those into the
command specified. A simple example would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls | xargs -n 2 echo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default the command is echo, but for the sake of demonstration let&amp;rsquo;s add it
explicitly. The -n 2 will only pass 2 of the inputs at a time as arguments.
Let’s say you have the files a.txt, b.txt, c.txt, d.txt, e.txt and f.txt in the
directory where you run this. The output will look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a.txt b.txt
c.txt d.txt
e.txt f.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is because xargs is effectively running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo a.txt b.txt
echo c.txt d.txt
echo e.txt f.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also control where xargs substitutes the input in the command line by
using the -I argument.&lt;/p&gt;

&lt;p&gt;For example, you can append .bak to all of your files by the following command
line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls | xargs -I % -- mv % %.bak
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-find&#34;&gt;4. find&lt;/h2&gt;

&lt;p&gt;find simply lists files. The benefit that you get over ls is that it can
traverse whole directory trees and you can find specific files. It can be used
to find specific file extensions, files larger than a specific size, files
created or modified after a certain date, or files of a particular type
(directories, regular files, symbolic links, etc.).&lt;/p&gt;

&lt;p&gt;For example, I&amp;rsquo;m going to find all the files ending in &lt;code&gt;_test.go&lt;/code&gt; which
indicates a test file in Go.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find . -name &#39;*_test.go&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can be piped into into other commands or find has both and &lt;code&gt;-exec&lt;/code&gt; argument
where you can tell find to run a command with the filename interpolated or
&lt;code&gt;-delete&lt;/code&gt; to delete files.&lt;/p&gt;

&lt;h2 id=&#34;3-head-tail&#34;&gt;3. head/tail&lt;/h2&gt;

&lt;p&gt;head and tail will display lines from the beginning and end of files
(respectively).&lt;/p&gt;

&lt;p&gt;head is a bit more simple than tail. It just displays the number of lines you
specify starting from the top of a file. Since files all have a start determined
at file creation that doesn&amp;rsquo;t change until the file points to a different place
on disk when the file is re-created. head is useful when you have a large file,
but you just need to view the first portion of the file.&lt;/p&gt;

&lt;p&gt;tail will display the last lines of a file. When tail is used with the -f
argument, it reads the last few lines and waits for more lines to be appended to
the file. tail is tremendously helpful when viewing logs as most of the time you
don&amp;rsquo;t care about the top of the log file, you just care about the last few
seconds, minutes, or hours.&lt;/p&gt;

&lt;h2 id=&#34;2-jq&#34;&gt;2. jq&lt;/h2&gt;

&lt;p&gt;jq is one of the newest tools that is finding it&amp;rsquo;s way to standard installs
everywhere. jq will parse JSON and let you query it using expressions. As
JSON-based APIs become more prominent in services, jq will let you query
specific values without having to write code in Python, Ruby, or Perl to parse a
single JSON field.&lt;/p&gt;

&lt;p&gt;jq is not installed on OS X (and most Linux distros) by default and will require
being installed via Homebrew.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a runnable example using jq against the Github API:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl &#39;https://api.github.com/repos/stedolan/jq/commits?per_page=5&#39; | jq &#39;.[].commit.message&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will list the last 5 commit messages of the &lt;a href=&#34;https://github.com/stedolan/jq&#34;&gt;https://github.com/stedolan/jq&lt;/a&gt; repo.&lt;/p&gt;

&lt;h2 id=&#34;1-awk&#34;&gt;1. awk&lt;/h2&gt;

&lt;p&gt;awk is a Turing-complete interpreter and is capable of a lot, but at the very
least awk can be used to find positional text and print it out. Here is a common
one-liner I personally use when interacting with Docker. The following example
will remove all exited containers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker ps -a | grep Exited | awk &#39;{ print $1; }&#39; | xargs -n 1 docker rm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you can remove the grep and use awk&amp;rsquo;s regular expressions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker ps -a | awk &#39;/Exited/ { print $1; }&#39; | xargs -n 1 docker rm
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;0-man&#34;&gt;0. man&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s a lot of ways to make your time on the command line easier but you&amp;rsquo;ll
need to read up on how. Since man is always there you&amp;rsquo;ll always have
documentation right at your fingertips.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;man xargs
man find
man tail
man head
man jq
man awk
# and even...
man man
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Fixed vs. Growth System Failures</title>
      <link>http://jessed.io/post/20161019-Fixed-vs-Growth-System-Failures/</link>
      <pubDate>Wed, 19 Oct 2016 11:06:08 -0800</pubDate>
      
      <guid>http://jessed.io/post/20161019-Fixed-vs-Growth-System-Failures/</guid>
      <description>

&lt;p&gt;The concept of Mindset based on the work: &lt;a href=&#34;http://amzn.to/2dEPR9M&#34;&gt;Mindset by Dr. Carol S. Dweck,
Ph.D.&lt;/a&gt;
has been around for some time now, but recently I was thinking about root cause
analyses meant as a tool for learning. Revisiting the John Allspaw post: The
&lt;a href=&#34;http://www.kitchensoap.com/2014/11/14/the-infinite-hows-or-the-dangers-of-the-five-whys/&#34;&gt;Infinite Hows (or, the Dangers Of The Five
Whys)&lt;/a&gt; make me start thinking about
what makes a lot of people look at postmortems as a checkbox or paperwork and
not value them as learning experiences.&lt;/p&gt;

&lt;h2 id=&#34;mindsets&#34;&gt;Mindsets&lt;/h2&gt;

&lt;p&gt;Mindsets are how people view qualities related to their own abilities. There are
two types of mindsets: fixed and growth.&lt;/p&gt;

&lt;p&gt;A fixed mindset views abilities as fixed traits that have a finite limit. A
person with a fixed mindset tends to think that challenges should be avoided and
can give up easily; effort is unnecessary because their ability is a known
quality.&lt;/p&gt;

&lt;p&gt;In contrast to a fixed mindset, a growth mindset believes that abilities can be
developed and a person&amp;rsquo;s full potential cannot be known because there is no end
to developing traits. A person with a growth mindset tends to think that
challenges can be embraced because the potential to grow is greater; effort
leads to greater understanding.&lt;/p&gt;

&lt;p&gt;I tend to see a growth mindset with engineers in tech when approaching software
development. Engineers in tech, in general, have to have a growth mindset
because there&amp;rsquo;s always a new language, framework, service, system, etc. to
learn. However, when bad things happen in production on a lot of teams will
approach the postmortem with a fixed mindset.&lt;/p&gt;

&lt;h2 id=&#34;qualities-of-a-fixed-mindset-rca&#34;&gt;Qualities of a Fixed Mindset RCA&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Fixed Mindset Quality #1:&lt;/strong&gt; The root cause asserts blame.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When cloud/infrastructure provider x has an outage and our software is
unavailable as a result.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A fixed mindset will assert blame for a failure. This is usually because an RCA
is perceived as a tool for finding fault.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fixed Mindset Quality #2:&lt;/strong&gt; The root cause is an admission of failure.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve heard the answer in many postmortem meetings that &amp;ldquo;I did this&amp;rdquo; or &amp;ldquo;an
engineer acted on the system&amp;rdquo;. It implies that the engineer who pushed the
button caused the failure.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Q: How do we prevent the issue that caused the outage from happening again?&lt;br /&gt;
A: Engineers need to do a better job.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Fixed Mindset Quality #3:&lt;/strong&gt; The root cause is extraneous paperwork.&lt;/p&gt;

&lt;p&gt;Organizations will sometimes put the requirement that a software engineering
team conduct a root cause analysis before they can release again. This is
generally a good practice, but if RCAs are approached with a fixed mindset the
RCA is viewed as red tape, paperwork, or some sort of bureaucratic checkbox.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fixed Mindset Quality #4:&lt;/strong&gt; The postmortem lacks follow-up actions&lt;/p&gt;

&lt;p&gt;A fixed mindset perspective views each incident as isolated and based on a
mistake and being more careful next time will prevent another outage.&lt;/p&gt;

&lt;h2 id=&#34;qualities-of-a-growth-mindset-rca&#34;&gt;Qualities of a Growth Mindset RCA&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Growth Mindset Quality #1:&lt;/strong&gt; The root cause asserts responsibility.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cloud/infrastructure provider x had an outage and our software does not
handle the case when y service is not available.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A growth mindset will see faults as something that can be fixed and improved.
The growth mindset views RCAs as a tool for understanding and improvement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Growth Mindset Quality #2:&lt;/strong&gt; The root cause is an opportunity to learn.&lt;/p&gt;

&lt;p&gt;A growth mindset will explore the deeper understanding of what happened and the
circumstances. This implies that the engineer is an actor in a larger systemic
problem and not simply a single cause.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Growth Mindset Quality #3:&lt;/strong&gt; The root cause is a necessary learning opportunity.&lt;/p&gt;

&lt;p&gt;A growth mindset will conduct a postmortem without it being a required
activity. The learning opportunity is valuable and a growth mindset will view
it as a way for all parties involved to learn more about the system under
review. Typically a growth mindset will value reading RCAs out of interest and
curiosity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Growth Mindset Quality #4:&lt;/strong&gt; The postmortem has many follow-up actions.&lt;/p&gt;

&lt;p&gt;After a postmortem has taken place, a growth mindset will have at least 2
possibly 3 follow-up actions as the postmortem should have created a way for
teams to collaborate and provided a venue for solving problems and finding
innovative ways to prevent problems.&lt;/p&gt;

&lt;h2 id=&#34;methods-for-growth-mindset-postmortems&#34;&gt;Methods for Growth Mindset Postmortems&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Almost all questions should begin with &amp;ldquo;what&amp;rdquo; or &amp;ldquo;how&amp;rdquo; and seldom should they
begin with &amp;ldquo;why&amp;rdquo;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Why tends to be the wrong question more often than not. Why tends to lead to pointing fingers at people or systems and doesn&amp;rsquo;t tend to understand the &lt;em&gt;actual&lt;/em&gt; cause of the event.&lt;/p&gt;

&lt;p&gt;For example, &amp;ldquo;Why did a bug ship to production?&amp;rdquo; vs. &amp;ldquo;How did a bug ship to production?&amp;rdquo;. Why would lead you to a response similar to &amp;ldquo;because the team didn&amp;rsquo;t test it&amp;rdquo;. How would lead you to a response similar to &amp;ldquo;because the tests did not catch it.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hindsight is &lt;sup&gt;20&lt;/sup&gt;&amp;frasl;&lt;sub&gt;20&lt;/sub&gt; so remember the actions that cause an incident are obvious
now, but may not have been obvious during the incident.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A postmortem can&amp;rsquo;t focus on what should have been done, but rather what was done
and, based on that, how the software or the system can be changed to prevent
failures. At a postmortem you typically have a better idea of what went wrong
and can look at an event and say &amp;ldquo;yep, we shouldn&amp;rsquo;t have done that&amp;rdquo; but that
brings present context into a past event. At the time, the causes of the event
happened because something was perceived to be not dangerous.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reinforce accountability without reinforcing blame.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s okay for a retrospective to come up with a set of action items that teams
and other people and teams are accountable for, but remember that everyone is
on the same &amp;ldquo;team&amp;rdquo;. The goal is to improve the system, learn more as engineers,
and share the knowledge. Blaming failures on yourself, other engineers, other
teams, technologies, frameworks, etc. will not help anyone grow.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The x feature of this language&amp;rsquo;s core library is a mess and causes y issue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even if the description of the issue was well formed (which it tends not to be) the lead into it absolves the team of accountability.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The team was not aware at the time that the x feature of the language&amp;rsquo;s core library would cause y issue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This indicates that the the team has acknowledged the gap in understanding and sets up describing a follow up action easily and shares knowledge of the issue at hand.&lt;/p&gt;

&lt;h2 id=&#34;feed-your-growth-mindset-postmortems&#34;&gt;Feed your Growth Mindset postmortems&lt;/h2&gt;

&lt;p&gt;Be a consumer of postmortems. There are a lot of public postmortems out there
because a lot of companies have run into very non-obvious problems with
technologies integrated into a system.&lt;/p&gt;

&lt;p&gt;Here are a couple of my favorite postmortems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.joyent.com/blog/manta-postmortem-7-27-2015&#34;&gt;https://www.joyent.com/blog/manta-postmortem-7-27-2015&lt;/a&gt;&lt;br /&gt;
Joyent&amp;rsquo;s postmortem had a lot of reflection and I learned a lot reading it. I
can only imagine how much the engineering teams learned from the postmortem.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blog/1261-github-availability-this-week&#34;&gt;https://github.com/blog/1261-github-availability-this-week&lt;/a&gt;&lt;br /&gt;
Github&amp;rsquo;s postmortem from 2012 is my first exposure to failure in distributed
system failures and really got me thinking about to what extent a failure of a
distributed system could mean.
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You don&amp;rsquo;t have to share your postmortems publicly to get people motivated.
Internally at the company you work at, you should share your postmortems across
your engineering organization; A wiki is a good medium for this. Embracing the
Growth Mindset means accepting feedback on your postmortems you publish and
looking to learn from others. What happened to team X? How did they fix it? How
will they keep it from happening again?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go is for .Close()’ers</title>
      <link>http://jessed.io/post/20161004-Go-is-for-Closers/</link>
      <pubDate>Tue, 04 Oct 2016 10:35:32 -0800</pubDate>
      
      <guid>http://jessed.io/post/20161004-Go-is-for-Closers/</guid>
      <description>

&lt;p&gt;In Go the typical way to open a file or connection is this commonly seen block
of code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;connection, err := net.Dial(&amp;quot;tcp&amp;quot;, &amp;quot;example.com:80&amp;quot;)
if err != nil {
    // Do something to handle the error
    return
}
defer connection.Close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That &lt;code&gt;defer connection.Close()&lt;/code&gt; on line 6 plays a vital role in writing Go code
that won’t run your host machine out of memory, kernel file descriptors, or any
other transactional resource (one in which operations open, do something, then
close). All that does is put the function call on a stack that is called in LIFO
(&lt;em&gt;Ed. originally wrote FIFO&lt;/em&gt;) order after the code goes out of scope. This post
aims to focus on the &lt;code&gt;Close()&lt;/code&gt; method though.&lt;/p&gt;

&lt;h2 id=&#34;the-interfaces-are-weak&#34;&gt;The interfaces are weak?!&lt;/h2&gt;

&lt;p&gt;Go has interfaces explicit interfaces that define a close method. The IO package
has a lot of them (all composing the Closer interface): ReadCloser, WriteCloser,
and ReadWriteCloser. Each of these indicate a struct that needs to be closed
when you’ve written or read everything or decided you’ve written or read enough.&lt;/p&gt;

&lt;p&gt;Not everything that needs to be closed is so obviously named though. The
“database/sql” package just has a DB struct that has a Close method. Also in the
same package the Stmt type and Rows type has a Close method.&lt;/p&gt;

&lt;p&gt;In other cases, the Close method is even further obscured by not being a part of
a defined type in the package. This is used in the “http” package all over the
place. The Body attribute in the Response struct is an io.ReadCloser.&lt;/p&gt;

&lt;h2 id=&#34;abc-always-be-closing&#34;&gt;ABC — Always Be Closing&lt;/h2&gt;

&lt;p&gt;In Go, closing is important and defers we’re built to group closes with their
definition. In other languages there is usually a syntax for closing a
connection at the end of a block. In Java, it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;try(FileInputStream input = new FileInputStream(“file.txt”)) {
  int data = input.read();
  while(data != -1) {
    System.out.print((char) data);
    data = input.read();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s the example in Ruby:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;File.open(‘hello.txt’, ‘r’) do |f|
 while line = f.gets
   puts line
 end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Go we get defers. They’re fine I guess, but it does mean that we don’t get
the luxury of knowing how to Close a resource without reading the documentation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you do not read the documentation for the resource you are about to use it
could mean disaster&lt;/strong&gt;. For example, this gem from the &amp;ldquo;net/http&amp;rdquo; package docs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The default HTTP client’s Transport does not attempt to reuse HTTP/1.0 or
HTTP/1.1 TCP connections (“keep-alive”) unless the Body is read to completion
and is closed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also in the aforementioned &amp;ldquo;database/sql&amp;rdquo; package if you forget to close Stmt in
MySQL this causes your Go program to allocate 16,382 prepared statements for the
connection you are using and then your Go program will be unable to allocate
prepared statements until your connection restarts.&lt;/p&gt;

&lt;p&gt;At a basic level, eventually you will exhaust the number of file descriptors you
are allowed by the kernel. Files can be on disk files but also TCP sockets in a
Linux system.&lt;/p&gt;

&lt;h2 id=&#34;only-one-thing-matters&#34;&gt;Only one thing matters&lt;/h2&gt;

&lt;p&gt;Read the docs look for a Close method, look for a struct name that ends in
Closer. When you review code, make sure that resources have a defer with a Close
method. Dealing with resources is something we do as engineers who write code
that run in production so we have to remember that they are managed, finite, and
must be released to the system when the program is done with them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Who’s Running that on my System: Case of the stolen CPU</title>
      <link>http://jessed.io/post/20160916-Whos-running-that-on-my-system/</link>
      <pubDate>Fri, 16 Sep 2016 01:11:56 -0700</pubDate>
      
      <guid>http://jessed.io/post/20160916-Whos-running-that-on-my-system/</guid>
      <description>

&lt;p&gt;Last week, I found myself needing to find what application a query was originating from.
My typical method for doing this is searching through source code before I
eventually get angry that I can’t find the query originating from an ORM and
start drafting an email decreeing that all applications get distinct logins to
the database that I’ll never send because who is going to listen anyway.&lt;/p&gt;

&lt;p&gt;I had an idea for how I can track a query all the way back to the process that
accessed it and I even scripted it.&lt;/p&gt;

&lt;h2 id=&#34;connections&#34;&gt;Connections&lt;/h2&gt;

&lt;p&gt;In MySQL every connection is mapped to a thread and each thread has an ID. When
you run SHOW PROCESSLIST in MySQL you can see all the running processes. The
information for this comes from the processlist table in the information_schema
database. This table also lists the host and the ephemeral port of the
connection. The ephemeral port exists on the client (initiating) side of a TCP
connection. So if you see a query running by using a tool like mytop and you’re
able to capture the thread ID you can be pretty sure that the connection is
still open because TCP connections are expensive and most libraries try to pool
them and reuse them.&lt;/p&gt;

&lt;p&gt;Here is the section of the Go program I wrote to capture the host and the port.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;db, err := sql.Open(&amp;quot;mysql&amp;quot;, user+&amp;quot;:&amp;quot;+password+&amp;quot;@tcp(&amp;quot;+host+&amp;quot;:3306)/information_schema&amp;quot;)
if err != nil {
  log.Fatal(err)
}
defer db.Close()

hostWithPort := getHost(db)
if hostWithPort == nil {
  log.Println(&amp;quot;Could not find query with that ID&amp;quot;)
  return
}
hostAndPort := strings.Split(hostWithPort, &amp;quot;:&amp;quot;)
host, port := hostAndPort[0], hostAndPort[1]

log.Printf(&amp;quot;Host: %s  Port: %s\n&amp;quot;, host, port)

func getHost(db *sql.DB) string {
	result, err := db.Query(&amp;quot;select HOST from processlist where ID = ?&amp;quot;, *pid)
	if err != nil {
		log.Panic(err)
	}

	defer result.Close()

	var host string
	for result.Next() {
		result.Scan(&amp;amp;host)
	}

	return host
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hunting-down-the-connection&#34;&gt;Hunting down the connection&lt;/h2&gt;

&lt;p&gt;Once you have the host and port you can then ssh into the host that you were
given to find what process is connected to the port. This can be discovered
using a program like lsof. There are many ways to find the port a process is
using but I am most familiar with lsof.&lt;/p&gt;

&lt;p&gt;The Go code to SSH into a server uses the golang.org/x/crypto/ssh library and
I’ve incorporated some of my knowledge of bash.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sshClient, err := setUpSSHClient(host)
if err != nil {
  log.Panic(err)
}
defer sshClient.Close()

lsofOut, err := runCmd(sshClient, &amp;quot;sudo lsof -i tcp:&amp;quot;+port+&amp;quot; | tail -1 | awk &#39;{ print $2; }&#39;&amp;quot;)
lsofOut = strings.Trim(lsofOut, &amp;quot;\n\r &amp;quot;)
if err != nil {
  log.Panic(err)
}

psOut, err := runCmd(sshClient, &amp;quot;ps -p &amp;quot;+lsofOut+&amp;quot; -o pid -o etime -o command&amp;quot;)
if err != nil {
  log.Panic(err)
}

log.Printf(&amp;quot;PID: %s\n&amp;quot;, lsofOut)
log.Printf(&amp;quot;Process that owns connection:\n%s\n&amp;quot;, psOut)

func setUpSSHClient(host string) (*ssh.Client, error) {
	privkey, err := ioutil.ReadFile(os.Getenv(&amp;quot;HOME&amp;quot;) + &amp;quot;/.ssh/id_rsa&amp;quot;)
	if err != nil {
		return nil, err
	}
	signer, err := ssh.ParsePrivateKey(privkey)
	if err != nil {
		return nil, err
	}
	sshConfig := &amp;amp;ssh.ClientConfig{
		User: *sshuser,
		Auth: []ssh.AuthMethod{
			ssh.PublicKeys(signer),
		},
	}

	client, err := ssh.Dial(&amp;quot;tcp&amp;quot;, host+&amp;quot;:22&amp;quot;, sshConfig)
	if err != nil {
		return nil, err
	}

	return client, nil
}

func runCmd(client *ssh.Client, command string) (string, error) {
	sess, err := client.NewSession()
	if err != nil {
		return &amp;quot;&amp;quot;, err
	}
	defer sess.Close()

	b, err := sess.CombinedOutput(command)
	if err != nil {
		return &amp;quot;&amp;quot;, err
	}

	return string(b), nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This helped me find the process that was running the problematic query. I was
able to find what codebase was causing the issue and thus the team that owns
that codebase. It turns out they were in the middle of a deploy to fix the
problem because they noticed it right before I did.&lt;/p&gt;

&lt;p&gt;Once you have found the process you can you can also other informative things
like run strace, jstack, or gdb to diagnose issues (I wouldn’t recommend doing
this in production).&lt;/p&gt;

&lt;p&gt;Happy query hunting!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>